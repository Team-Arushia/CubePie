From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: woobeen Jeon <woobeen0516@gmail.com>
Date: Tue, 3 Dec 2024 20:16:44 +0900
Subject: [PATCH] fix a error in Brain class


diff --git a/src/main/java/net/minecraft/world/entity/ai/Brain.java b/src/main/java/net/minecraft/world/entity/ai/Brain.java
index 46192592e08cd20b8698bfc24c4246a8464ac66c..15813474b5f3a6cd561775af80846694cc2cf459 100644
--- a/src/main/java/net/minecraft/world/entity/ai/Brain.java
+++ b/src/main/java/net/minecraft/world/entity/ai/Brain.java
@@ -100,7 +100,7 @@ public class Brain<E extends LivingEntity> {
                             .resultOrPartial(Brain.LOGGER::error)
                             .map(Builder::build)
                             .orElseGet(ImmutableList::of);
-                        return DataResult.success(new Brain<>(memoryModules, sensors, immutableList, mutableObject::getValue));
+                        return DataResult.success(new Brain<>(memoryModules, sensors, immutableList, this::codec)); // CubePie - fix a error in Brain class
                     }
 
                     private <T, U> DataResult<Brain.MemoryValue<U>> captureRead(MemoryModuleType<U> memoryType, DynamicOps<T> ops, T value) {
@@ -196,14 +196,14 @@ public class Brain<E extends LivingEntity> {
         if (optional == null) {
             throw new IllegalStateException("Unregistered memory fetched: " + type);
         } else {
-            return optional.map(ExpirableValue::getValue);
+            return (Optional<U>) optional.map(ExpirableValue::getValue); // CubePie - fix a error in Brain class
         }
     }
 
     @Nullable
     public <U> Optional<U> getMemoryInternal(MemoryModuleType<U> type) {
         Optional<? extends ExpirableValue<?>> optional = this.memories.get(type);
-        return optional == null ? null : optional.map(ExpirableValue::getValue);
+        return optional == null ? null : (Optional<U>) optional.map(ExpirableValue::getValue); // CubePie - fix a error in Brain class
     }
 
     public <U> long getTimeUntilExpiry(MemoryModuleType<U> type) {
