From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: woobeen Jeon <woobeen0516@gmail.com>
Date: Mon, 2 Dec 2024 22:05:13 +0900
Subject: [PATCH] Use LinkedBlockingDeque in IAsyncTaskHandler


diff --git a/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java b/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
index f22fb84c7e7929d6c80c44b13179cf385d8a43f9..0c0a5b8364156b332f011ea855ce44bdac4057a9 100644
--- a/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
+++ b/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
@@ -7,6 +7,8 @@ import java.util.List;
 import java.util.Queue;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
+import java.util.concurrent.LinkedBlockingDeque;
+import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.LockSupport;
 import java.util.function.BooleanSupplier;
 import java.util.function.Supplier;
@@ -20,8 +22,9 @@ import org.slf4j.Logger;
 public abstract class BlockableEventLoop<R extends Runnable> implements ProfilerMeasured, ProcessorHandle<R>, Executor {
     private final String name;
     private static final Logger LOGGER = LogUtils.getLogger();
-    private final Queue<R> pendingRunnables = Queues.newConcurrentLinkedQueue();
+    private final LinkedBlockingDeque<R> pendingRunnables = new LinkedBlockingDeque(); // Jettpack
     private int blockingCount;
+    private R next = null; // Jettpack
 
     protected BlockableEventLoop(String name) {
         this.name = name;
@@ -90,7 +93,7 @@ public abstract class BlockableEventLoop<R extends Runnable> implements Profiler
     @Override
     public void tell(R runnable) {
         this.pendingRunnables.add(runnable);
-        LockSupport.unpark(this.getRunningThread());
+        // LockSupport.unpark(this.getRunningThread()); // Jettpack
     }
 
     @Override
@@ -116,15 +119,20 @@ public abstract class BlockableEventLoop<R extends Runnable> implements Profiler
     }
 
     public boolean pollTask() {
-        R runnable = this.pendingRunnables.peek();
-        if (runnable == null) {
-            return false;
-        } else if (this.blockingCount == 0 && !this.shouldRun(runnable)) {
+        // Jettpack start
+        if (this.next == null && !this.pendingRunnables.isEmpty()) {
+            this.waitForTasks();
+        }
+
+        if (this.next == null) {
             return false;
         } else {
-            this.doRunTask(this.pendingRunnables.remove());
+            R r2 = this.next;
+            this.next = null;
+            this.doRunTask(r2);
             return true;
         }
+        // Jettpack end
     }
 
     public void managedBlock(BooleanSupplier stopCondition) {
@@ -142,8 +150,18 @@ public abstract class BlockableEventLoop<R extends Runnable> implements Profiler
     }
 
     public void waitForTasks() {
-        Thread.yield();
-        LockSupport.parkNanos("waiting for tasks", 100000L);
+        // Jettpack start
+        if (this.next != null) {
+            throw new IllegalStateException("next != null");
+        }
+        try {
+            this.next = this.pendingRunnables.poll(100L, TimeUnit.MICROSECONDS);
+            return;
+        }
+        catch (InterruptedException interruptedException) {
+            return;
+        }
+        // Jettpack end
     }
 
     protected void doRunTask(R task) {
