From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: woobeen Jeon <woobeen0516@gmail.com>
Date: Sun, 1 Dec 2024 20:30:32 +0900
Subject: [PATCH] Implement Icterine


diff --git a/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java b/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
index ebbad97920df3d1645637e646a98e16cb04d361e..470de49e3253c1c85e6d79bf4314a1a0a087de01 100644
--- a/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
@@ -1,5 +1,6 @@
 package net.minecraft.advancements.critereon;
 
+import com.arushia.cubepie.configuration.CubePieConfiguration;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
@@ -15,6 +16,7 @@ import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.ItemLike;
+import pm.meh.icterine.impl.StackSizeThresholdManager;
 
 public class InventoryChangeTrigger extends SimpleCriterionTrigger<InventoryChangeTrigger.TriggerInstance> {
     @Override
@@ -23,6 +25,18 @@ public class InventoryChangeTrigger extends SimpleCriterionTrigger<InventoryChan
     }
 
     public void trigger(ServerPlayer player, Inventory inventory, ItemStack stack) {
+        // CubePie start - Implement Icterine
+        if(CubePieConfiguration.getInstance().getConfig().getBoolean("icterine.enabled")) {
+            if ((stack.isEmpty() && CubePieConfiguration.getInstance().getConfig().getBoolean("icterine.ignore-triggers-for-emptied-stacks"))
+                || (CubePieConfiguration.getInstance().getConfig().getBoolean("icterine.ignore-triggers-for-decreased-stacks")
+                && stack.getCount() < stack.icterine$getPreviousStackSize())
+                || (CubePieConfiguration.getInstance().getConfig().getBoolean("icterine.optimize-triggers-for-increased-stacks")
+                && !StackSizeThresholdManager.doesStackPassThreshold(stack))) {
+                return;
+            }
+        }
+        // CubePie end
+
         int i = 0;
         int j = 0;
         int k = 0;
@@ -90,6 +104,19 @@ public class InventoryChangeTrigger extends SimpleCriterionTrigger<InventoryChan
                 List<ItemPredicate> list = new ObjectArrayList<>(this.items);
                 int i = inventory.getContainerSize();
 
+                // CubePie start - Implement Icterine
+                if (CubePieConfiguration.getInstance().getConfig().getBoolean("icterine.enabled") && CubePieConfiguration.getInstance().getConfig().getBoolean("icterine.optimize-multiple-predicate-trigger")
+                    && !list.removeIf(itemPredicate -> {
+                        if(CubePieConfiguration.getInstance().getConfig().getBoolean("icterine.enabled") && CubePieConfiguration.getInstance().getConfig().getBoolean("icterine.check-count-before-item-predicate-match")){
+                            return itemPredicate.icterine$fasterMatches(stack);
+                        } else {
+                            return itemPredicate.test(stack);
+                        }
+                    })) {
+                    return false;
+                }
+                // CubePie end
+
                 for (int j = 0; j < i; j++) {
                     if (list.isEmpty()) {
                         return true;
@@ -97,7 +124,15 @@ public class InventoryChangeTrigger extends SimpleCriterionTrigger<InventoryChan
 
                     ItemStack itemStack = inventory.getItem(j);
                     if (!itemStack.isEmpty()) {
-                        list.removeIf(item -> item.test(itemStack));
+                        list.removeIf(item -> {
+                            // CubePie start - Implement Icterine
+                            if(CubePieConfiguration.getInstance().getConfig().getBoolean("icterine.enabled") && CubePieConfiguration.getInstance().getConfig().getBoolean("icterine.check-count-before-item-predicate-match")){
+                                return item.icterine$fasterMatches(itemStack);
+                            } else {
+                                return item.test(itemStack);
+                            }
+                            // CubePie end
+                        });
                     }
                 }
 
diff --git a/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java b/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java
index c3a0b91516c04a417f6093d3f8e30de6acc5d0ca..c2a33bb746c32a07da27088b4bead519a5b67349 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java
@@ -49,6 +49,19 @@ public record ItemPredicate(
         }
     }
 
+    public boolean icterine$fasterMatches(ItemStack itemStack) {
+        Optional<Integer> minThr = count.min();
+        Optional<Integer> maxThr = count.max();
+        int stackCount = itemStack.getCount();
+        int prevStackCount = itemStack.icterine$getPreviousStackSize();
+
+        if ((minThr.map(integer -> (prevStackCount < integer && integer <= stackCount)).orElseGet(() -> prevStackCount == 0))
+            && (maxThr.isEmpty() || stackCount <= maxThr.get())) {
+            return test(itemStack);
+        }
+        return false;
+    }
+
     public static class Builder {
         private Optional<HolderSet<Item>> items = Optional.empty();
         private MinMaxBounds.Ints count = MinMaxBounds.Ints.ANY;
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
index 1df99f4babf6adb8f363dbf6d83ae6218206ada4..b0d3b6e6a4aef07e4c7d19e3d563ecfff8260202 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.inventory;
 
+import com.arushia.cubepie.configuration.CubePieConfiguration;
 import com.google.common.base.Suppliers;
 import com.google.common.collect.HashBasedTable;
 import com.google.common.collect.Lists;
@@ -46,6 +47,7 @@ import org.bukkit.event.Event.Result;
 import org.bukkit.event.inventory.InventoryDragEvent;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.InventoryView;
+import pm.meh.icterine.util.ItemStackUtil;
 // CraftBukkit end
 
 public abstract class AbstractContainerMenu {
@@ -153,7 +155,13 @@ public abstract class AbstractContainerMenu {
     protected Slot addSlot(Slot slot) {
         slot.index = this.slots.size();
         this.slots.add(slot);
-        this.lastSlots.add(ItemStack.EMPTY);
+        // CubePie start - Implement Icterine
+        if (slot.container instanceof Inventory && slot.hasItem() && CubePieConfiguration.getInstance().getConfig().getBoolean("icterine.enabled")) {
+            lastSlots.add(slot.getItem());
+        } else {
+            lastSlots.add(ItemStack.EMPTY);
+        }
+        // CubePie end
         this.remoteSlots.add(ItemStack.EMPTY);
         return slot;
     }
@@ -299,6 +307,11 @@ public abstract class AbstractContainerMenu {
             ItemStack itemstack2 = (ItemStack) copySupplier.get();
 
             this.lastSlots.set(slot, itemstack2);
+            // CubePie start - Implement Icterine
+            if(CubePieConfiguration.getInstance().getConfig().getBoolean("icterine.enabled"))
+                ItemStackUtil.processItemStackInTriggerSlotListeners(itemstack1, itemstack2);
+            // CubePie end
+
             Iterator iterator = this.containerListeners.iterator();
 
             while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index eec0ec43590be7e8ae5b530a7404c98b5e23cb53..b8a451e5315823dce6342863e8184f85733fb4d1 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -228,6 +228,7 @@ public final class ItemStack implements DataComponentHolder {
     private PatchedDataComponentMap components;
     @Nullable
     private Entity entityRepresentation;
+    private int icterine$previousStackSize; // CubePie - Implement Icterine
 
     private static DataResult<ItemStack> validateStrict(ItemStack stack) {
         DataResult<Unit> dataresult = ItemStack.validateComponents(stack.getComponents());
@@ -385,6 +386,16 @@ public final class ItemStack implements DataComponentHolder {
         return this.getItem().builtInRegistryHolder();
     }
 
+    // CubePie start - Implement Icterine
+    public void icterine$setPreviousStackSize(int value) {
+        icterine$previousStackSize = value;
+    }
+
+    public int icterine$getPreviousStackSize() {
+        return icterine$previousStackSize;
+    }
+    // CubePie end
+
     public boolean is(TagKey<Item> tag) {
         return this.getItem().builtInRegistryHolder().is(tag);
     }
diff --git a/src/main/java/pm/meh/icterine/impl/ReloadListenerHandlerBase.java b/src/main/java/pm/meh/icterine/impl/ReloadListenerHandlerBase.java
new file mode 100644
index 0000000000000000000000000000000000000000..7819b3a8e17ec3abb77a9455ce7a27527800bf2a
--- /dev/null
+++ b/src/main/java/pm/meh/icterine/impl/ReloadListenerHandlerBase.java
@@ -0,0 +1,79 @@
+package pm.meh.icterine.impl;
+
+import com.arushia.cubepie.configuration.CubePieConfiguration;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import net.minecraft.advancements.CriteriaTriggers;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.packs.resources.ResourceManager;
+import net.minecraft.server.packs.resources.SimpleJsonResourceReloadListener;
+import net.minecraft.util.profiling.ProfilerFiller;
+
+import java.util.Map;
+import java.util.Objects;
+
+public class ReloadListenerHandlerBase extends SimpleJsonResourceReloadListener {
+    private static final Gson GSON = (new GsonBuilder()).create();
+    private static final String FOLDER = "advancements";
+
+    public ReloadListenerHandlerBase() {
+        super(GSON, FOLDER);
+    }
+
+    /**
+     * Collects all item count thresholds from loaded advancements.
+     * For example, if there are advancements for obtaining any amount of stone,
+     * 5 emeralds and 64 sticks, thresholds will be [1, 5, 64].
+     * We then could use these thresholds to prevent unneeded advancement scanning.
+     * For example, there is no need to check advancements when dirt stack size
+     * increases from 52 to 53 if there's no advancement for getting 53 dirt.
+     */
+    @Override
+    protected void apply(Map<ResourceLocation, JsonElement> object, ResourceManager resourceManager, ProfilerFiller profilerFiller) {
+        if (CubePieConfiguration.getInstance().getConfig().getBoolean("icterine.enabled") && CubePieConfiguration.getInstance().getConfig().getBoolean("icterine.optimize-triggers-for-increased-stacks")) {
+            StackSizeThresholdManager.clear();
+
+            String inventoryChangedTriggerId = Objects.requireNonNull(BuiltInRegistries.TRIGGER_TYPES.getKey(CriteriaTriggers.INVENTORY_CHANGED)).toString();
+
+            for (JsonElement advancementElement : object.values()) {
+                JsonObject advancementCriteria = advancementElement.getAsJsonObject().getAsJsonObject("criteria");
+                if (advancementCriteria != null && !advancementCriteria.isJsonNull()) {
+                    for (var criterionEntry : advancementCriteria.entrySet()) {
+                        JsonObject criterion = criterionEntry.getValue().getAsJsonObject();
+                        JsonElement criterionTrigger = criterion.get("trigger");
+                        JsonObject criterionConditions = criterion.getAsJsonObject("conditions");
+                        if (criterionTrigger != null && criterionConditions != null
+                            && !criterionTrigger.isJsonNull() && !criterionConditions.isJsonNull()
+                            && criterionTrigger.getAsString().equals(inventoryChangedTriggerId)
+                            && criterionConditions.has("items")) {
+                            for (JsonElement itemElement : criterionConditions.getAsJsonArray("items")) {
+                                JsonElement itemCount = itemElement.getAsJsonObject().get("count");
+                                if (itemCount != null && !itemCount.isJsonNull()) {
+                                    int itemCountMinValue = 0;
+
+                                    if (itemCount.isJsonObject()) {
+                                        JsonElement itemCountMin = itemCount.getAsJsonObject().get("min");
+                                        if (itemCountMin != null && !itemCountMin.isJsonNull()) {
+                                            itemCountMinValue = itemCountMin.getAsInt();
+                                        }
+                                    } else {
+                                        itemCountMinValue = itemCount.getAsInt();
+                                    }
+
+                                    if (itemCountMinValue > 1) {
+                                        StackSizeThresholdManager.add(itemCountMinValue);
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+
+            //StackSizeThresholdManager.debugPrint();
+        }
+    }
+}
diff --git a/src/main/java/pm/meh/icterine/impl/StackSizeThresholdManager.java b/src/main/java/pm/meh/icterine/impl/StackSizeThresholdManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..3639ba5aadb48e7c2b1cf0a33231180f6b4ab5be
--- /dev/null
+++ b/src/main/java/pm/meh/icterine/impl/StackSizeThresholdManager.java
@@ -0,0 +1,45 @@
+package pm.meh.icterine.impl;
+
+import net.minecraft.server.packs.resources.ResourceManager;
+import net.minecraft.util.profiling.ProfilerFiller;
+import net.minecraft.world.item.ItemStack;
+
+import java.util.Map;
+import java.util.SortedSet;
+import java.util.TreeSet;
+
+/**
+ * Helper class for collecting and checking stack size thresholds
+ * (see {@link pm.meh.icterine.impl.ReloadListenerHandlerBase#apply(Map, ResourceManager, ProfilerFiller)})
+ */
+public class StackSizeThresholdManager {
+
+    private static final SortedSet<Integer> stackSizeThresholds = new TreeSet<>();
+
+    public static void clear() {
+        stackSizeThresholds.clear();
+        stackSizeThresholds.add(1);
+    }
+
+    public static void add(int value) {
+        stackSizeThresholds.add(value);
+    }
+
+    public static boolean doesStackPassThreshold(ItemStack stack) {
+        int prevValue = stack.icterine$getPreviousStackSize();
+        int newValue = stack.getCount();
+
+        // We already check this at InventoryChangeTriggerMixin
+//        if (newValue < prevValue) {
+//            return false;
+//        }
+
+        for (int thr : stackSizeThresholds) {
+            if (prevValue < thr && newValue >= thr) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+}
diff --git a/src/main/java/pm/meh/icterine/util/ItemStackUtil.java b/src/main/java/pm/meh/icterine/util/ItemStackUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..cf353e0d5dbf55ff81e57ab51f1468c4750c0220
--- /dev/null
+++ b/src/main/java/pm/meh/icterine/util/ItemStackUtil.java
@@ -0,0 +1,22 @@
+package pm.meh.icterine.util;
+
+import net.minecraft.world.item.ItemStack;
+
+public class ItemStackUtil {
+    /**
+     * Compare old and new stacks and mark new stack with `lastChangeDecreasedStack`
+     * if those stacks contain the same item, and the size of the new stack is smaller
+     * than the old one.
+     * <br>
+     * When slot content changes, this method is used to determine if change was caused
+     * by decreasing stack size.
+     *
+     * @param oldStack previous ItemStack
+     * @param newStack new ItemStack
+     */
+    public static void processItemStackInTriggerSlotListeners(ItemStack oldStack, ItemStack newStack) {
+        if (ItemStack.isSameItem(newStack, oldStack)) {
+            newStack.icterine$setPreviousStackSize(oldStack.getCount());
+        }
+    }
+}
diff --git a/src/main/resources/configurations/cubepie.yml b/src/main/resources/configurations/cubepie.yml
index 42000f5fbcc521cc045d5e5f7c0d1e1b9b59eeef..1f4c39db95d4a374a107fdac6efe598f7f6d9fb8 100644
--- a/src/main/resources/configurations/cubepie.yml
+++ b/src/main/resources/configurations/cubepie.yml
@@ -1,3 +1,11 @@
 no-chat-reports:
   enabled: true
-  convert-to-game-message: true
\ No newline at end of file
+  convert-to-game-message: true
+
+icterine:
+  enabled: true
+  optimize-triggers-for-increased-stacks: true
+  optimize-multiple-predicate-trigger: true
+  check-count-before-item-predicate-match: true
+  ignore-triggers-for-emptied-stacks: true
+  ignore-triggers-for-decreased-stacks: true
\ No newline at end of file
